import os
import json
import csv
import zipfile
import pandas as pd

# Path to the zip file
zip_path = r"D:\wpl\wpl_json.zip"
# Directory to extract the zip file
extract_dir = r"D:\wpl\extracted"
# Directory to save the CSV files
output_dir = r"D:\wpl\csv_output_final"

# Create directories if they don't exist
os.makedirs(extract_dir, exist_ok=True)
os.makedirs(output_dir, exist_ok=True)

# Extract the zip file
with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_dir)

# Function to process a single JSON file
def process_json_to_csv(json_file_path, csv_file_path):
    with open(json_file_path, 'r') as json_file:
        data = json.load(json_file)
        
        # Extract meta and info data
        meta = data.get('meta', {})
        info = data.get('info', {})
        innings = data.get('innings', [])
        
        # Prepare CSV headers
        headers = [
            'venue', 'teams', 'date', 'season', 'player_of_match',  # New columns added here
            'winner', 'innings', 'over', 'delivery',
            'batter', 'bowler', 'non_striker', 
            'wide_extra', 'legbyes_extra', 'noball_extra',  # Extras columns
            'runs_batter', 'runs_extras', 'runs_total',     # Runs columns
            'wicket_player_out', 'wicket_fielder', 'wicket_kind'  # Wicket columns
        ]
        
        # Open CSV file for writing
        with open(csv_file_path, 'w', newline='') as csv_file:
            writer = csv.DictWriter(csv_file, fieldnames=headers)
            writer.writeheader()
            
            # Process each innings
            for inning_index, inning in enumerate(innings, start=1):
                team = inning.get('team', '')
                overs = inning.get('overs', [])
                
                for over in overs:
                    over_number = over.get('over', 0)
                    deliveries = over.get('deliveries', [])
                    
                    for delivery_index, delivery in enumerate(deliveries, start=1):
                        batter = delivery.get('batter', '')
                        bowler = delivery.get('bowler', '')
                        non_striker = delivery.get('non_striker', '')
                        runs = delivery.get('runs', {})
                        runs_batter = runs.get('batter', 0)
                        runs_extras = runs.get('extras', 0)
                        runs_total = runs.get('total', 0)
                        
                        # Check for extras
                        extras = delivery.get('extras', {})
                        wide_extra = 1 if 'wides' in extras else 0
                        legbyes_extra = 1 if 'legbyes' in extras else 0
                        noball_extra = 1 if 'noballs' in extras else 0
                        
                        # Check for wickets
                        wickets = delivery.get('wickets', [])
                        wicket_player_out = ''
                        wicket_fielder = ''
                        wicket_kind = ''
                        
                        if wickets:
                            wicket = wickets[0]  # Assuming only one wicket per delivery
                            wicket_player_out = wicket.get('player_out', '')
                            wicket_kind = wicket.get('kind', '')
                            
                            # Extract fielder name if available
                            fielders = wicket.get('fielders', [])
                            if fielders:
                                wicket_fielder = fielders[0].get('name', '')
                        
                        # Format delivery as over.ball (e.g., 0.1, 0.2, ..., 1.1, 1.2, ...)
                        delivery_format = f"{over_number}.{delivery_index}"
                        
                        # Write row to CSV
                        writer.writerow({
                            'venue': info.get('venue', ''),
                            'teams': ', '.join(info.get('teams', [])),
                            'date': info.get('dates', [''])[0],
                            'season': info.get('season', ''),  # New column: season
                            'player_of_match': ', '.join(info.get('player_of_match', [])),  # New column: player_of_match
                            'winner': info.get('outcome', {}).get('winner', ''),
                            'innings': f"{inning_index}",
                            'over': over_number,
                            'delivery': delivery_format,
                            'batter': batter,
                            'bowler': bowler,
                            'non_striker': non_striker,
                            'wide_extra': wide_extra,       # Extras columns
                            'legbyes_extra': legbyes_extra,
                            'noball_extra': noball_extra,
                            'runs_batter': runs_batter,      # Runs columns
                            'runs_extras': runs_extras,
                            'runs_total': runs_total,
                            'wicket_player_out': wicket_player_out,  # Wicket columns
                            'wicket_fielder': wicket_fielder,
                            'wicket_kind': wicket_kind
                        })

# Process all JSON files in the extracted directory
for root, dirs, files in os.walk(extract_dir):
    for file in files:
        if file.endswith('.json'):
            json_file_path = os.path.join(root, file)
            csv_file_name = os.path.splitext(file)[0] + '.csv'
            csv_file_path = os.path.join(output_dir, csv_file_name)
            process_json_to_csv(json_file_path, csv_file_path)

print("Conversion completed. CSV files are saved in:", output_dir)


# Directory containing the CSV files
csv_dir = r"D:\wpl\csv_output"
# Output file path for the merged CSV
output_file = r"D:\wpl\wpl_csv_final.csv"

# List to hold all DataFrames
all_dataframes = []

# Loop through all CSV files in the directory
for file in os.listdir(csv_dir):
    if file.endswith(".csv"):
        file_path = os.path.join(csv_dir, file)
        # Read each CSV file into a DataFrame
        df = pd.read_csv(file_path)
        # Append the DataFrame to the list
        all_dataframes.append(df)

# Combine all DataFrames into a single DataFrame
merged_df = pd.concat(all_dataframes, ignore_index=True)

# Write the merged DataFrame to a new CSV file
merged_df.to_csv(output_file, index=False)

print(f"All CSV files have been merged into {output_file}")
